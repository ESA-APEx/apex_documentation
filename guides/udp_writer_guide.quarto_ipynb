{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: Guide for writing openEO User Defined Processes\n",
        "---\n",
        "\n",
        "## Development Flow\n",
        "\n",
        "The development of an openEO User Defined Process (UDP) starts with the creation of a process graph. This\n",
        "graph is a visual representation of the data processing workflow, which can be built using the openEO API and its tools.\n",
        "The graph consists of nodes, each representing a specific process or operation, and edges that define the flow of data\n",
        "between these nodes.\n",
        "\n",
        "To start with the development of an openEO process graph, you need to select an openEO backend that provides access to the\n",
        "data you want to process. The backend is responsible for executing the process graph and returning the results. Once you\n",
        "have selected a backend, you can begin building your process graph by using the existing tools and libraries provided by\n",
        "openEO. These tools allow you to create, modify, and visualize your process graph in a user-friendly manner. Once you have\n",
        "created your process graph, you can test it on the selected openEO backend to ensure that it works as expected. This step\n",
        "is crucial, as it allows you to identify any issues or errors in your process graph before packaging it as a User Defined\n",
        "Process (UDP).\n",
        "\n",
        "Once your process graph is complete, you can package it into a an openEO UDP, enabling it to be executed by\n",
        "other project members or the broader community. As a final step, you may onboard the service onto the ESA NoR,\n",
        "establishing a cost model and additional revenue stream for service execution.\n",
        "\n",
        "The full development flow for creating and sharing an openEO UDP is summarized below:\n",
        "\n",
        "1. **Create an Account**: Create an account with an existing openEO API provider, preferably an\\\n",
        "   [APEx-compliant hosting platform](../propagation/platforms.md). This is where the UDP will be hosted.\n",
        "2. **Create the Process Graph**: Develop a processing graph that represents your workflow using the existing tools provided\\\n",
        "by your chosen.  For users with an existing Python implementation, openEO offers flexibility in developing their process\\\n",
        "graph. They can:\n",
        "    a. Utilize predefined openEO processes: map your existing Python functions to equivalent openEO operations.\n",
        "    b. Create [User Defined Functions (UDF)](https://open-eo.github.io/openeo-python-client/udf.html): Create custom\\\n",
        "    functions to be executed by openEO.\n",
        "3. **Test the Process Graph**: Test the graph on your selected platform.\n",
        "4. **Encapsulate as a UDP**: The process graph is then encapsulated as a UDP, complete with metadata, as described in the\\\n",
        "   next section.\n",
        "5. **Test the UDP**: Test the UDP on one or more openEO-based platforms to validate its functionality.\n",
        "6. **Share the UDP**: Once validated, the UDP is shared as a JSON definition for broader use.\n",
        "7. **Register the UDP on ESA NoR**: Define a cost model, making the service available on the ESA Network of\n",
        "   Resources.\n",
        "\n",
        "::: {.callout-tip}\n",
        "Keep in mind that APEx offers [Algorithm Porting](../propagation/porting.md)\n",
        "and [Algorithm Onboarding](../propagation/onboarding.md) support to help you with transforming your algorithm into an\n",
        "openEO UDP, onboarding it onto an [APEx-compliant hosting platform](../propagation/platforms.md), registering it in the\n",
        "[APEx Algorithm Services Catalogue](../propagation/onboarding.md#apex-algorithm-services-catalogue) and its onboarding onto\n",
        "the [ESA Network of Resources](https://portfolio.nor-discover.org/).\n",
        ":::\n",
        "\n",
        "## Creating an openEO User Defined Process {#sec-udp-writing}\n",
        "\n",
        "User defined processes (UDPs) are one out of two standardised options that APEx offers to publish algorithms as a\n",
        "service. This guide gives some concrete steps and guidelines to ensure that your UDP works well for your users. These\n",
        "guidelines are written with APEx in mind, but can also serve as a general guide for openEO UDPs. Where needed,\n",
        "recommendations and choices are made to increase uniformity across\n",
        "the[APEx Algorithm Services Catalogue](../propagation/onboarding.md#apex-algorithm-services-catalogue).\n",
        "\n",
        "For more background on UDP's, or a basic tutorial on creating them, the open source Python client provides\n",
        "[a good starting point](https://open-eo.github.io/openeo-python-client/udp.html).\n",
        "\n",
        "### Example cases\n",
        "\n",
        "The best way to learn how to write a UDP is to look at existing examples:\n",
        "\n",
        "* `max_ndvi_composite`: [UDP code](https://github.com/ESA-APEx/apex_algorithms/tree/main/algorithm_catalog/vito/max_ndvi_composite)\n",
        "and [description](https://github.com/ESA-APEx/apex_algorithms/blob/main/algorithm_catalog/vito/max_ndvi_composite/openeo_udp/max_ndvi_composite_description.md).\n",
        "\n",
        "### Organizing your code\n",
        "\n",
        "A UDP is simply a parametrized version of an openEO process graph, and as such we recommend that you use the same code\n",
        "to develop and test your algorithm, as you use to generate the UDP json. This ensures that your UDP is functionally\n",
        "equivalent to your code. Your code remains your own, and you only need to export the JSON UDP definition to share it\n",
        "with APEx.\n",
        "\n",
        "It is however advisable for your UDP to link back to a public git repository if available, making your open source code\n",
        "more discoverable.\n",
        "\n",
        "#### UDP versioning\n",
        "\n",
        "APEx requires you to use versioning, to ensure that changes in your algorithm are clearly communicated and visible to users.\n",
        "A good way to do this is to use [semantic versioning](https://semver.org/), which is a widely used versioning scheme.\n",
        "\n",
        "In combination with git tags, this allows you to easily track different versions of your UDP JSON, and share immutable\n",
        "links to specific versions. In addition, you can also create tags that always point to the latest development or stable version.\n",
        "\n",
        "One use case is an algorithm change that requires you to change parameters. We refer to such a change as 'backward incompatible',\n",
        "because users of the existing algorithm will not be able to switch to the new version without an update on their side.\n",
        "In such a case, you can create a new UDP version, and keep the old one available for users that are not ready to switch yet.\n",
        "Also in the UDP catalog, we recommend to keep both versions side-by-side for a certain time frame before removing the old\n",
        "one.\n",
        "\n",
        "A changelog is also required, to document the changes between versions. Guidance on how to keep changelogs can be found\n",
        "[online](https://keepachangelog.com/en/1.1.0/).\n",
        "\n",
        "It is not mandatory to store your UDP JSON in the APEx git repository, especially if the project already maintains an open\n",
        "source (git) repository. The APEx repository is only a suggestion, which can be convenient if you do not have an alternative.\n",
        "\n",
        "As an example, the image below shows how one project effectively used git tags to version multiple UDP's\n",
        "that are hosted on GitHub. In this case, these tags exist alongside regular software version tags!\n",
        "\n",
        "![git tags example](./images/versioning_tags.png){width=75%}\n",
        "\n",
        "### How many UDPs should I write?\n",
        "\n",
        "Deciding on the granularity of your UDP is an important aspect of making your algorithm usable. There is no need to try\n",
        "and fit all possible use cases into a single UDP. Instead, consider to define pieces of functionality that can work with\n",
        "a limited set of parameters, and write a single UDP for each piece.\n",
        "\n",
        "### Parameter conventions\n",
        "\n",
        "This section provides some recommendations on how to name parameters in your UDP. While these are not mandatory, we\n",
        "recommend to consider them to avoid that users of the\n",
        "APEx [Algorithm Services Catalogue](https://algorithm-catalogue.apex.esa.int/) would be confused by variations in\n",
        "process parameter names.\n",
        "\n",
        "Please [let us know](https://github.com/ESA-APEx/apex_documentation/issues) if you encounter a parameter that could use\n",
        "a convention, and we will add it here.\n",
        "\n",
        "#### Spatial filtering\n",
        "\n",
        "Any algorithm requires spatial filtering, so we can make the life of our users easier if we all use the same naming.\n",
        "\n",
        "In the standard openEO processes `load_collection` and `load_stac`, spatial filtering done through the argument called\n",
        "`spatial_extent`, which support multiple types: a bounding box object, an inline GeoJSON object, a vector cube, or it\n",
        "can even be left empty (`null`).\n",
        "For maximum flexibility, compatibility and the best user experience, we recommend to perform spatial filtering in your\n",
        "algorithm:\n",
        "\n",
        "* directly in `load_collection`/`load_stac` (instead of separate `filter_bbox`/`filter_spatial` processes)\n",
        "* using a parameter named `spatial_extent` (unless there are good reasons otherwise)\n",
        "  spatial filtering in these processes, and also use `spatial_extent` as the parameter name unless there are good\n",
        "  reasons otherwise.\n",
        "\n",
        "If you pass on the `spatial_extent` parameter to all `load_collection` processes in your UDP, then it is also allowed to\n",
        "perform filtering using vector data. This conveniently allows for advanced spatial filtering use cases!\n",
        "\n",
        "The Python client has a convenience function called\n",
        "[`Parameter.spatial_extent()`](https://open-eo.github.io/openeo-python-client/api.html#openeo.api.process.Parameter.spatial_extent)\n",
        "to create this parameter when building your UDP via Python.\n",
        "\n",
        "#### Temporal filtering\n",
        "\n",
        "For openEO processes that support arbitrary temporal ranges, we recommend using `temporal_extent` as the name of\n",
        "parameter to ensure consistency with other openEO processes, such as `load_collection`.\n",
        "\n",
        "Many cases also require a time range with a fixed length. In such a case, you can allow to specify only the start or end\n",
        "date, and use the `date_shift` process to construct the second date in the temporal interval, ensuring a fixed length.\n",
        "This avoids faulty user input.\n",
        "\n",
        "### Avoid use of `save_result`\n",
        "\n",
        "Most openEO process graphs end in a `save_result`process. However, this is not recommended for UDPs, as the user may\n",
        "want to perform additional processing steps before generating the result. So having a `DataCube` (raster or vector)\n",
        "as the final output is recommended unless if your service wants to enforce specific settings on how the output is to be\n",
        "generated.\n",
        "\n",
        "### Include default parameters within the UDP\n",
        "\n",
        "Via the [@openeo_processing_parameters] extension, platform specific parameters (also known as `job options`) can be\n",
        "included directly in the process definition. While the primary recommendation is to avoid using platform specific parameters,\n",
        "it is nevertheless a very good idea to include them when they are necessary.\n",
        "\n",
        "### UDP documentation\n",
        "\n",
        "The description of your UDP should be quite extensive if you want users to be able to easily assess if it's suitable for\n",
        "them.\n",
        "\n",
        "We recommend including these sections:\n",
        "\n",
        "1. **Description**: A short description of what the algorithm does.\n",
        "2. **Performance characteristics**: Information on the computational efficiency of the algorithm. Include a relative\n",
        "   cost if available.\n",
        "3. **Examples**: One or more examples of the algorithm in action, using images or plots to show a typical result. Point\n",
        "   to a STAC metadata file with an actual output asset to give users full insight into what is generated.\n",
        "4. **Literature references**: If your algorithm is based on scientific literature, provide references to the relevant\n",
        "   publications.\n",
        "5. **Known limitations**: Any known limitations of the algorithm, such as the type of data it works best with, or the\n",
        "   size of the area it can process efficiently.\n",
        "6. **Known artifacts**: Use images and plots to clearly show any known artifacts that the algorithm may produce. This\n",
        "   helps users to understand what to expect from the algorithm.\n",
        "\n",
        "A [template](https://github.com/ESA-APEx/apex_documentation/blob/main/guides/udp_description_template.md) is available\n",
        "to help you structure your documentation.\n",
        "\n",
        "## Integrating your openEO process (UDP) in APEx {#sec-udp-integration}\n",
        "\n",
        "Once you have an eligible openEO process, you are ready to integrate it in APEx. At this point, you should have an HTTP\n",
        "link to a JSON document that defines the process, and is publicly accessible. The most common way to do this is to store\n",
        "it in a public git repository. Tagging a release is a good way to ensure that the link remains stable.\n",
        "\n",
        "### Registering your process\n",
        "\n",
        "Next, you will need to upload a generic JSON to\n",
        "the [APEx Algorithm Catalogue](https://algorithm-catalogue.apex.esa.int/) to register your process. For now, this is\n",
        "done by creating a pull request in\n",
        "the [APEx Algorithm Catalogue GitHub repository](https://github.com/ESA-APEx/apex_algorithms).\n",
        "\n",
        "An example json is provided below. The properties to modify are listed here:\n",
        "\n",
        "* *id*: a unique identifier for your process\n",
        "* *created* and *updated* timestamps\n",
        "* *title*: a descriptive title\n",
        "* *description*: a detailed description of the process\n",
        "* *contacts*: a list of contacts, with at least one principal investigator\n",
        "* *keywords*: a list of free form keywords\n",
        "* *themes*: Applicable concepts from a scheme. Concepts can be found in\n",
        "  the [ESA Data Ontology](https://data.esa.int/esado)\n",
        "* *license*: the license under which the process is published. You can use\n",
        "  the [SPDX license list](https://spdx.org/licenses/) for this. Proprietary licenses are possible, within the terms of\n",
        "  your ESA project.\n",
        "\n",
        "The *links* section is crucial, the following \"rel\" values are mandatory:\n",
        "\n",
        "* *openeo-process*: exactly one link to the JSON document that defines the process\n",
        "* *service*: at least one link to an openEO backend that is able to execute the process\n",
        "* *example*: at least one link to a STAC metadata file that shows the output of the process\n",
        "\n",
        "The *type* field of these links should be set to `application/json`. Please provide a descriptive *title* for each link,\n",
        "allowing to understand what the link is about.\n",
        "\n",
        "```{json}\n",
        "\n",
        "{\n",
        "  \"id\": \"max_ndvi_composite\",\n",
        "  \"type\": \"Feature\",\n",
        "  \"conformsTo\": [\n",
        "    \"http://www.opengis.net/spec/ogcapi-records-1/1.0/req/record-core\",\n",
        "    \"https://apex.esa.int/core/openeo-udp\"\n",
        "  ],\n",
        "  \"properties\": {\n",
        "    \"created\": \"2024-09-06T00:00:00Z\",\n",
        "    \"updated\": \"2024-09-06T00:00:00Z\",\n",
        "    \"type\": \"service\",\n",
        "    \"title\": \"Max NDVI Composite based on Sentinel-2 data\",\n",
        "    \"description\": \"A compositing algorithm for Sentinel-2 L2A data, ranking observations by their maximum NDVI.\",\n",
        "    \"cost_estimate\": 1,\n",
        "    \"cost_unit\": \"platform credits per km\\u00b2\",\n",
        "    \"keywords\": [\n",
        "      \"vegetation\",\n",
        "      \"ndvi\n",
        "    ],\n",
        "    \"language\": {\n",
        "      \"code\": \"en-US\",\n",
        "      \"name\": \"English (United States)\"\n",
        "    },\n",
        "    \"languages\": [\n",
        "      {\n",
        "        \"code\": \"en-US\",\n",
        "        \"name\": \"English (United States)\"\n",
        "      }\n",
        "    ],\n",
        "    \"contacts\": [\n",
        "      {\n",
        "        \"name\": \"Jeroen Dries\",\n",
        "        \"position\": \"Researcher\",\n",
        "        \"organization\": \"VITO\",\n",
        "        \"links\": [\n",
        "          {\n",
        "            \"href\": \"https://www.vito.be/\",\n",
        "            \"rel\": \"about\",\n",
        "            \"type\": \"text/html\"\n",
        "          },\n",
        "          {\n",
        "            \"href\": \"https://github.com/jdries\",\n",
        "            \"rel\": \"about\",\n",
        "            \"type\": \"text/html\"\n",
        "          }\n",
        "        ],\n",
        "        \"contactInstructions\": \"Contact via VITO\",\n",
        "        \"roles\": [\n",
        "          \"principal investigator\"\n",
        "        ]\n",
        "      },\n",
        "      {\n",
        "        \"name\": \"VITO\",\n",
        "        \"links\": [\n",
        "          {\n",
        "            \"href\": \"https://www.vito.be/\",\n",
        "            \"rel\": \"about\",\n",
        "            \"type\": \"text/html\"\n",
        "          }\n",
        "        ],\n",
        "        \"contactInstructions\": \"SEE WEBSITE\",\n",
        "        \"roles\": [\n",
        "          \"processor\"\n",
        "        ]\n",
        "      }\n",
        "    ],\n",
        "    \"themes\": [ {\n",
        "        \"concepts\": [\n",
        "          { \"id\": \"NORMALIZED DIFFERENCE VEGETATION INDEX (NDVI)\", url: \"https://gcmd.earthdata.nasa.gov/kms/concept/2297a00a-80f5-466e-b28e-b9ca42562d3f?format=json\" },\n",
        "          { \"id\": \"Sentinel-2 MSI\",  \"url\": \"https://gcmd.earthdata.nasa.gov/kms/concept/fc57a9a0-a287-4bcf-a517-20811b55596b?format=json\" }\n",
        "        ],\n",
        "        \"scheme\": \"https://gcmd.earthdata.nasa.gov/kms/concepts/concept_scheme/sciencekeywords\"\n",
        "      }],\n",
        "    \"formats\": [\n",
        "      \"GeoTiff\", \"netCDF\"\n",
        "    ],\n",
        "    \"license\": \"CC-BY-4.0\"\n",
        "  },\n",
        "  \"linkTemplates\": [],\n",
        "  \"links\": [\n",
        "    {\n",
        "      \"rel\": \"application\",\n",
        "      \"type\": \"application/json\",\n",
        "      \"title\": \"openEO Process Definition\",\n",
        "      \"href\": \"https://raw.githubusercontent.com/ESA-APEx/apex_algorithms/max_ndvi_composite/openeo_udp/examples/max_ndvi_composite/max_ndvi_composite.json\"\n",
        "    },\n",
        "    {\n",
        "      \"rel\": \"service\",\n",
        "      \"type\": \"application/json\",\n",
        "      \"title\": \"CDSE openEO federation\",\n",
        "      \"href\": \"https://openeofed.dataspace.copernicus.eu\"\n",
        "    },\n",
        "    {\n",
        "      \"rel\": \"example-output\",\n",
        "      \"type\": \"application/json\",\n",
        "      \"title\": \"Example output\",\n",
        "      \"href\": \"https://radiantearth.github.io/stac-browser/#/external/s3.waw3-1.cloudferro.com/swift/v1/APEx-examples/max_ndvi_denmark/collection.json\"\n",
        "    },\n",
        "    {\n",
        "      \"rel\": \"webapp\",\n",
        "      \"type\": \"text/html\",\n",
        "      \"title\": \"OpenEO Web Editor\",\n",
        "      \"href\": \"https://editor.openeo.org/?wizard=UDP&wizard~process=max_ndvi_composite&wizard~processUrl=https://raw.githubusercontent.com/ESA-APEx/apex_algorithms/main/algorithm_catalog/vito/max_ndvi_composite/openeo_udp/max_ndvi_composite.json&server=https://openeofed.dataspace.copernicus.eu\"\n",
        "    }\n",
        "  ]\n",
        "}\n",
        "\n",
        "```\n",
        "\n",
        "### Defining a validation & benchmark scenario\n",
        "\n",
        "APEx has the capability to automatically check if your openEO process is working as expected, and if the cost for\n",
        "specific scenarios is sufficiently stable over time. This is a very important feature to avoid that your users have a\n",
        "bad experience. It also helps to ensure that the openEO backend provider you selected is performing well, and that\n",
        "changes to the backend service do not break your process.\n",
        "\n",
        "APEx requires at least one benchmark scenario, to be able to correctly mark processes that are (temporarily)unavailable.\n",
        "When this happens, the 'principal investigator', as defined in the JSON of the previous step, is informed, allowing to\n",
        "take action as desired.\n",
        "\n",
        "The benchmark scenarios are defined as JSON files in the\n",
        "`benchmark_scenarios` folder of your service. The schema of\n",
        "these files is defined (as JSON Schema)in the\n",
        "[`schema/benchmark_scenario.json`](https://github.com/ESA-APEx/apex_algorithms/blob/main/schemas/benchmark_scenario.json)\n",
        "file.\n",
        "\n",
        "Example benchmark definition:\n",
        "\n",
        "```{json}\n",
        "[\n",
        "  {\n",
        "    \"id\": \"max_ndvi\",\n",
        "    \"type\": \"openeo\",\n",
        "    \"backend\": \"openeofed.dataspace.copernicus.eu\",\n",
        "    \"process_graph\": {\n",
        "      \"maxndvi1\": {\n",
        "        \"process_id\": \"max_ndvi\",\n",
        "        \"namespace\": \"https://raw.githubusercontent.com/ESA-APEx/apex_algorithms/f99f351d74d291d628e3aaa07fd078527a0cb631/openeo_udp/examples/max_ndvi/max_ndvi.json\",\n",
        "        \"arguments\": {\n",
        "          \"temporal_extent\": [\"2023-08-01\", \"2023-09-30\"],\n",
        "          ...\n",
        "        },\n",
        "        \"result\": true\n",
        "      }\n",
        "    },\n",
        "    \"reference_data\": {\n",
        "      \"job-results.json\": \"https://s3.example/max_ndvi.json:max_ndvi:reference:job-results.json\",\n",
        "      \"openEO.tif\": \"https://s3.example/max_ndvi.json:max_ndvi:reference:openEO.tif\"\n",
        "    }\n",
        "  },\n",
        "  ...\n",
        "]\n",
        "```\n",
        "\n",
        "Note how each benchmark scenario references:\n",
        "\n",
        "* the target openEO backend to use.\n",
        "* an openEO process graph to execute.\n",
        "  The process graph will typically just contain a single node\n",
        "  pointing with the `namespace` field to the desired process definition\n",
        "  at a URL, following\n",
        "  the [remote process definition extension](https://github.com/Open-EO/openeo-api/tree/draft/extensions/remote-process-definition).\n",
        "  The URL will typically be a raw GitHub URL to the JSON file in the `openeo_udp` folder, but it can also be a URL to a\n",
        "  different location.\n",
        "* reference data to which actual results should be compared.\n",
        "\n",
        "#### Defining and updating benchmark reference data\n",
        "\n",
        "A benchmark scenario should define reference data, with which the actual results of benchmark runs should be compared.\n",
        "The `reference_data` field of a benchmark scenario is a JSON object that maps each of\n",
        "the openEO batch job result assets (by asset name) to a URL where the reference data can be found, e.g.\n",
        "\n",
        "```json\n",
        "{\n",
        "  \"reference_data\": {\n",
        "    \"job-results.json\": \"https://s3.example/max_ndvi.json:max_ndvi:reference:job-results.json\",\n",
        "    \"openEO.tif\": \"https://s3.example/max_ndvi.json:max_ndvi:reference:openEO.tif\"\n",
        "  }\n",
        "}\n",
        "```\n",
        "\n",
        "The reference data URLs should be publicly accessible. For example, as suggested by the example, as S3 storage URLs.\n",
        "While you are free to manage the hosting of the reference data yourself, it is recommended to just rely on the APEx\n",
        "infrastructure and workflows as follows.\n",
        "\n",
        "The APEx benchmarking system will automatically store the actual results (if any)of failed benchmark runs in a public S3\n",
        "bucket managed by APEx, to allow post-mortem inspection of these results. The URLs of these actual result assets will be\n",
        "reported in the benchmark report and can be used directly as reference data URLs for subsequent benchmark runs. Of\n",
        "course, make sure the actual results are properly validated and acceptable under your standards before using them as\n",
        "reference data for future benchmark runs.\n",
        "\n",
        "##### Initial reference data\n",
        "\n",
        "When you are initially defining a benchmark scenario, you may not have the full set of expected reference data and\n",
        "metadata yet. In this case, it's fine to leave out the `reference_data` field, make it an empty mapping object, or use\n",
        "invalid placeholder URLs. When the benchmark scenario is executed and the underlying openEO batch job finishes\n",
        "successfully, the actual batch job results will be downloaded first. Next, the full actual result set will be compared\n",
        "to the reference data, which will be missing or incomplete, causing the benchmark run to fail. This failure will trigger\n",
        "the storage of the actual results in the APEx S3 bucket, and the corresponding URLs will be reported in the (pytest\n",
        "based) benchmark run output of\n",
        "the [corresponding GitHub workflow run](https://github.com/ESA-APEx/apex_algorithms/actions/workflows/benchmarks.yaml).\n",
        "It will look like this:\n",
        "\n",
        "```text\n",
        "-------------------- `upload_assets` stats: {'uploaded': 2} --------------------\n",
        "- tests/test_benchmarks.py::test_run_benchmark[max_ndvi]:\n",
        "  - 'actual/openEO.tif' uploaded to 'https://s3.example/gh-1234!max_ndvi!actual/openEO.tif'\n",
        "  - 'actual/job-results.json' uploaded to 'https://s3.example/gh-1234!max_ndvi!actual/job-results.json'\n",
        "```\n",
        "\n",
        "These URLs can be used as reference data URLs for subsequent benchmark runs.\n",
        "\n",
        "##### Updating reference data\n",
        "\n",
        "When an algorithm is updated, or the underlying data changes for some reason, a benchmark scenario might start to fail\n",
        "on the reference data comparison. Updating the reference data is practically the same as defining it initially:look up\n",
        "the URLs of the actual results in the benchmark report, validate these new results, and update the benchmark scenario\n",
        "with the new reference data URLs."
      ],
      "id": "ee7dffc6"
    }
  ],
  "metadata": {
    "kernelspec": {
      "name": "python3",
      "language": "python",
      "display_name": "Python 3 (ipykernel)",
      "path": "C:\\DEV\\projects\\apex\\apex_documentation\\venv\\share\\jupyter\\kernels\\python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}